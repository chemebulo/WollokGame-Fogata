import protagonista.*
import enemigos.*
import visualesExtra.*
import escenariosManager.*
import gestores.*
import puertas.*

// ################################################################################################################# \\

//    USAR ESTAS MEDIDAS PARA TODOS LOS ESCENARIOS:
//        * 9 listas     -> Formando el alto del escenario.
//        * 13 elementos -> Formando el ancho del escenario.
//
//    IMPORTANTE: 
//        * Para crear:
//	        - Las puertas Norte, Sur, Este, Oeste (con ubicaciones),
//            - Las puertas cerradas Norte, Sur, Este, Oeste (con mensajes),
//            - Las puertas genéricas.
//        
//	      No es necesario crear objetos de tipo Elemento (véase escenarioManager.wlk) para dibujarlas,
//          solo se agregaran como visuales en los objetos "escenario" con el método agregarVisualesEscena().
//
//          Luego de dibujar el escenario reemplazar la N con _ si dibujamos todas las puertas. Si por ejemplo un 
//          escenario tiene solo puertas Oeste y Este, se puede dibujar algo en las N que simbolizan Norte y Sur.
//          Es importante sobreescribir el método configurarPuertas() con los requerimientos del escenario actual.
//
//    [
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
//        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]
//    ].reverse() 
//    
//    Nombres de variables recomendados: mapa_nombreEscenario

// ################################################################################################################# \\

// Referencias a los distintos visuales para setter sus posiciones a la matriz o instanciarlos.
class Elemento{ 
    const visual = null

    method construir(position){
        visual.position(position)
    }
}

// ################################################################################################################# \\

class ElementoAgregado{
    const gestorAgregador

    method construir(posicion) {
        const elemento = self.crearElemento(posicion)
        game.addVisual(elemento)
        gestorAgregador.agregar(elemento)
    }

    method crearElemento(posicion)
}

// ################################################################################################################# \\

class ElementoLobo inherits ElementoAgregado(gestorAgregador = gestorDeLobos){

    override method crearElemento(posicion){
        return new Lobo(position = posicion)
    }
}

// ################################################################################################################# \\

class ElementoObstaculo inherits ElementoAgregado(gestorAgregador = gestorDeObstaculos){

    override method crearElemento(posicion){
        return new Obstaculo(position = posicion)
    }
}
// ################################################################################################################# \\

class ElementoPared inherits ElementoObstaculo{

    override method crearElemento(posicion){
        return new ParedInvisible(position = posicion)
    }
}

// ################################################################################################################# \\

class ElementoLoboEspecial inherits ElementoLobo{

    override method crearElemento(posicion){
        return new LoboEspecial(position = posicion)
    }

    override method construir(posicion){
        super(posicion)
        puertaGranero.irHacia(entradaGranero)
    }
}
// ################################################################################################################# \\

object _ inherits Elemento{
    
    override method construir(position){} // Por polimorfismo.
}

// ################################################################################################################# \\

object o inherits ElementoObstaculo{}

object p inherits ElementoPared{}

// ################################################################################################################# \\

object l inherits ElementoLobo{}

object j inherits ElementoLoboEspecial{}
   
// ################################################################################################################# \\

object g inherits Elemento(visual = guardabosques){}

object z inherits Elemento(visual = protagonista){} 

object f inherits Elemento(visual = fogataOBJ){}

object v inherits Elemento(visual = carpa){}

object a inherits Elemento(visual = amiga){}

object n inherits Elemento(visual = nota){}

object x inherits Elemento(visual = cabañaOBJ){}

object q inherits Elemento(visual = graneroOBJ){}

object u inherits Elemento(visual = leña){}

object h inherits Elemento(visual = hacha){}

object m inherits Elemento(visual = manopla){}

object s inherits Elemento(visual = auto){}

object tr inherits Elemento(visual = tridente){}

// ################################################################################################################# \\

object po inherits Elemento(visual = puertaOeste){}

object pn inherits Elemento(visual = puertaNorte){}

object pe inherits Elemento(visual = puertaEste){}

object ps inherits Elemento(visual = puertaSur){}

object pg inherits Elemento(visual = puertaEntradaCabaña){}

object pc inherits Elemento(visual = puertaEntradaCueva){}

object pq inherits Elemento(visual = puertaGranero){}

// ################################################################################################################# \\

const mapa_comun = // Mapa por defecto, se usa solo en test.
    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]
    ].reverse()

// ################################################################################################################# \\

const mapa_escenarioInicial_v1 = 
    [
        [ p , p , p , p , p , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , p , p , p , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , p , p , p , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ p , _ , _ , _ , _ , _ , a , z , _ , f , v , p , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , p ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , p ]
    ].reverse()

// ################################################################################################################# \\

const mapa_escenarioBifurcacion_v1 =
    [
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , _ , p , p , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , _ , _ , o , o , _ , _ , _ , _ , _ , _ , _ , p ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , o , o , _ , _ , _ , o , o , _ , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , o , _ , _ , _ , p ],
        [ p , p , _ , _ , _ , _ , z , _ , _ , _ , _ , p , p ],
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ]
    ].reverse()

// ################################################################################################################# \\

const mapa_escenarioBifurcacion_v2 =     
    [
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , _ , p , p , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , _ , _ , o , o , _ , _ , _ , _ , _ , _ , _ , p ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , z , _ ],
        [ _ , _ , _ , o , o , l , _ , _ , o , o , _ , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , o , _ , _ , _ , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , l , _ , p , p ],
        [ p , p , p , p , _ , _ , _ , l , _ , p , p , p , p ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_escenarioBifurcacion_v3 =
    [
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , _ , p , p , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , _ , _ , o , o , _ , _ , _ , _ , _ , _ , _ , p ],
        [ z , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , o , o , _ , _ , _ , o , o , _ , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , o , _ , _ , _ , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_escenarioBifurcacion_v4 = 
    [
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , _ , p , p , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , _ , _ , o , o , _ , _ , _ , _ , _ , _ , _ , p ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , o , o , _ , _ , _ , o , o , _ , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , o , _ , _ , _ , p ],
        [ p , p , _ , _ , _ , _ , z , _ , _ , _ , _ , p , p ],
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_escenarioBifurcacion_v5 =    
    [
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , _ , p , p , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , _ , _ , o , o , _ , _ , _ , _ , _ , _ , _ , p ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , z , _ ],
        [ _ , _ , _ , o , o , l , _ , _ , o , o , _ , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , o , _ , _ , _ , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , l , _ , p , p ],
        [ p , p , p , p , _ , _ , _ , l , _ , p , p , p , p ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_escenarioBifurcacion_v6 =
    [
        [ p , p , p , p , _ , _ , pn, _ , _ , p , p , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , _ , p , p , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , _ , _ , o , o , _ , _ , _ , _ , _ , _ , _ , p ],
        [ z , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , o , o , _ , _ , _ , o , o , _ , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , o , _ , _ , _ , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_entradaCabaña_v1 = 
    [
        [ p , p , p , _ , _ , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , p , _ , _ , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ _ , _ , _ , _ , _ , _ , p , p , p , _ , _ , p , _ ],
        [ _ , z , _ , _ , _ , x ,pg , p , p , _ , _ , _ , p ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , _ ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_entradaCabaña_v2 = 
    [
        [ p , p , p , _ , _ , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , p , _ , _ , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ _ , _ , _ , _ , _ , _ , p , p , p , _ , _ , p , _ ],
        [ po , _ , _ , _ , z , x ,p , p , p , _ , _ , _ , p ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , _ ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_EntradaCabaña_v3 = 
    [
        [ p , p , p , _ , g , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , p , _ , _ , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ _ , _ , _ , _ , _ , _ , p , p , p , _ , _ , p , _ ],
        [ _ , _ , _ , _ , z , x , p , p , p , _ , _ , _ , p ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , _ ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_EntradaCabaña_v4 =   
    [
        [ p , p , p , _ , _ , _ , z , _ , p , p , p , p , _ ],
        [ p , p , p , _ , _ , _ , _ , _ , p , p , p , p , _ ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ _ , _ , _ , _ , _ , _ , p , p , p , _ , _ , p , _ ],
        [ _ , _ , _ , _ , _ , x ,pg , p , p , _ , _ , _ , p ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , _ ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_cabañaInicial_v1 = 
    [
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , p , p , p , p , p , p , p , p , p , _ , _ , _ ],
        [ _ , p , p , u , _ , _ , p , p , _ , p , _ , _ , _ ],
        [ _ , p , p , p , p , _ , _ , _ , _ , _ , p , _ , _ ],
        [ _ , p , pg, z , _ , _ , _ , _ , g , _ , p , _ , _ ],
        [ _ , p , p , p , _ , _ , _ , _ , _ , _ , p , _ , _ ],
        [ _ , p , p , p , p , p , p , p , p , p , p , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]
    ].reverse()   

// ################################################################################################################# \\

const mapa_cabañaInicial_v2 = 
    [
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , p , p , p , p , p , p , p , p , p , _ , _ , _ ],
        [ _ , p , p , u , _ , _ , p , p , _ , p , _ , _ , _ ],
        [ _ , p , p , p , p , _ , _ , _ , _ , l , p , _ , _ ],
        [ _ , p , pg, z , _ , _ , _ , n , _ , l , p , _ , _ ],
        [ _ , p , p , p , _ , _ , _ , _ , _ , _ , p , _ , _ ],
        [ _ , p , p , p , p , p , p , p , p , p , p , _ , _ ],
        [ _ , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]
    ].reverse()   
  
// ################################################################################################################# \\

const mapa_entradaCueva_v1 =
    [
        [ _ , _ , p , p , p , p , p , p , p , p , _ , p , p ],
        [ _ , _ , p , _ , _ , _ , p , _ , _ , _ , p , p , p ],
        [ _ , p , p , p , p , p , p , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , pc, _ , _ , l , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , z , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , l , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , p ]
    ].reverse()

// ################################################################################################################# \\

const mapa_entradaCueva_v2 = 
    [
        [ _ , _ , p , p , p , p , p , p , p , p , _ , p , p ],
        [ _ , _ , p , _ , _ , _ , p , _ , _ , _ , p , p , p ],
        [ _ , p , p , p , p , p , p , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , z , _ , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , p ]
    ].reverse()

// ################################################################################################################# \\

const mapa_entradaCueva_v3 =
    [
        [ _ , _ , p , p , p , p , p , p , p , p , _ , p , p ],
        [ _ , _ , p , _ , _ , _ , p , _ , _ , _ , p , p , p ],
        [ _ , p , p , p , p , p , p , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , pc, _ , l , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , z , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , l , _ , _ , _ , _ , _ ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , p ]
    ].reverse()

// ################################################################################################################# \\

const mapa_cueva_v1 =
    [
        [ _ , _ , _ , _ , _ , _ , pc, _ , _ , _ , _ , _ , _ ],
        [ o , o , o , _ , o , _ , o , o , o , o , _ , o , _ ],
        [ _ , l , _ , _ , o , _ , _ , _ , l , _ , _ , _ , _ ],
        [ _ , o , o , _ , o , _ , o , o , _ , o , _ , o , _ ],
        [ _ , o , _ , _ , _ , _ , _ , o , _ , _ , _ , o , _ ],
        [ _ , o , _ , o , o , o , _ , o , o , o , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , l , _ , _ , _ , _ , o , _ ],
        [ o , _ , o , o , _ , o , o , o , o , o , o , o , _ ],
        [ _ , _ , _ , _ , _ , _ , z , _ , _ , _ , _ , _ , _ ]     
    ].reverse()

// ################################################################################################################# \\

const mapa_cueva_v2 =
    [
        [ _ , o , _ , _ , _ , o , _ , _ , _ , _ , _ , o , _ ],
        [ _ , o , l , o , _ , o , _ , o , o , o , _ , o , _ ],
        [ _ , _ , _ , o , _ , _ , _ , _ , _ , l , _ , _ , _ ],
        [ o , o , _ , o , o , _ , o , o , _ , o , o , o , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o , pc],
        [ _ , o , o , o , o , l , _ , o , o , o , _ , o , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , o , _ , o , _ ],
        [ o , o , o , _ , o , o , o , o , _ , o , _ , o , _ ],
        [ _ , z , _ , _ , _ , _ , _ , _ , _ , o , _ , _ , _ ]
    ].reverse() 

// ################################################################################################################# \\

const mapa_cueva_v3 =
    [
        [ z , _ , _ , o , _ , _ , _ , _ , _ , o , _ , _ , _ ],
        [ o , o , _ , o , o , o , o , _ , o , o , _ , o , _ ],
        [ _ , _ , _ , _ , _ , _ , o , _ , _ , _ , _ , o , _ ],
        [ o , o , _ , o , o , _ , o , l , o , o , _ , o , _ ],
        [ _ , _ , _ , _ , l , _ , o , _ , _ , _ , _ , o , _ ],
        [ _ , o , _ , o , o , o , o , _ , o , o , _ , o , _ ],
        [ l , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o , _ ],
        [ o , o , _ , _ , o , o , o , _ , o , o , o , o , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , o , pc, _ , _ ]
    ].reverse()   

// ################################################################################################################# \\

const mapa_cueva_v4 =
    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o , z , _ ],
        [ _ , o , o , o , o , _ , o , _ , o , o , o , _ , _ ],
        [ _ , _ , l , _ , o , _ , o , _ , _ , _ , _ , _ , _ ],
        [ o , o , _ , o , o , _ , o , _ , o , _ , o , o , _ ],
        [ _ , _ , _ , o , _ , _ , _ , l , o , _ , _ , o , _ ],
        [ _ , o , o , o , _ , o , o , o , o , _ , o , o , o ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , l , _ ],
        [ _ , _ , _ , o , o , o , o , o , o , _ , o , o , _ ],
        [ _ , _ , _ , _ , _ , _ , pc, o , _ , _ , _ , _ , _ ]
    ].reverse()  
   
// ################################################################################################################# \\

const mapa_cueva_v5 =
    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o , z , _ ],
        [ _ , o , o , o , o , _ , o , _ , o , o , o , _ , _ ],
        [ _ , _ , _ , _ , o , _ , o , _ , _ , _ , _ , _ , _ ],
        [ o , o , _ , o , o , _ , o , _ , o , _ , o , o , _ ],
        [ pc, _ , _ , o , _ , _ , _ , l , o , _ , _ , o , _ ],
        [ _ , o , o , o , _ , o , o , o , o , _ , o , o , o ],
        [ _ , _ , _ , l , _ , _ , _ , _ , _ , _ , _ , l , _ ],
        [ _ , _ , _ , o , o , o , o , o , o , _ , o , o , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , o , _ , _ , _ , _ , _ ]
    ].reverse()  

// ################################################################################################################# \\

const mapa_entradaGranero_v1 = 
    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , p ],
        [ p , _ , _ , _ , _ , p , p , p , p , _ , _ , p , p ],
        [ p , _ , _ , _ , _ , q , pq, _ , _ , _ , _ , _ , p ],
        [ p , _ , _ , _ , g , _ , _ , _ , _ , _ , _ , _ , p ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , p , p , _ , _ , _ , z , _ , _ , _ , p , p , p ],
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ]
    ].reverse()

// ################################################################################################################# \\

const mapa_entradaGranero_v2 =    
    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ p , p , p , p , p , p , p , p , p , p , p , p , p ],
        [ p , _ , _ , _ , _ , p , p , p , p , _ , _ , p , p ],
        [ p , _ , _ , _ , _ , q , pq, _ , _ , _ , _ , _ , p ],
        [ p , _ , _ , _ , _ , _ , z , _ , _ , _ , _ , _ , p ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p ],
        [ p , p , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , _ , p , p , p ],
        [ p , p , p , p , _ , _ , _ , _ , _ , p , p , p , p ]
    ].reverse()

// ################################################################################################################# \\

const mapa_peleaGranero = 
    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , tr, _ , _ , m , _ , _ , h , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , l , _ , _ , _ , j , _ , _ , _ , l , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , z , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _, pq , _ , _ , _ , _ , _ , _ ]
    ].reverse()

// ################################################################################################################# \\

const mapa_FinalJuego =
    [
        [ o , o , o , o , o , o , o , o , o , o , o , o , o ],
        [ o , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o ],
        [ o , l , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o ],
        [ o , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o ],
        [ o , _ , _ , _ , g , _ , _ , _ , _ , _ , z , pc, o ],
        [ o , l , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o ],
        [ o , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o ],
        [ o , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , o ],
        [ o , o , o , o , o , o , o , o , o , o , o , o , o ]
    ].reverse()

// ################################################################################################################# \\

const mapa_estacionamiento_v1 = 
    [
        [ p , p , p , p , _ , _ , _ , _ , p , p , p , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , p , p , p , p ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p ],
        [ p , _ , _ , p , _ , _ , _ , _ , p , p , _ , _ , p ],
        [ p , _ , _ , s , _ , _ , _ , _ , _ , _ , _ , _ , p ],
        [ p , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , p , p ],
        [ p , p , p , _ , _ , _ , _ , _ , _ , _ , p , p , p ],
        [ p , p , p , p , _ , _ , z , _ , p , p , p , p , p ]
    ].reverse()

// ################################################################################################################# \\