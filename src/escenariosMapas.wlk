import protagonista.*
import enemigos.*
import visualesExtra.*
import escenarios.*
import gestores.*
import puertas.*

/*
    USAR ESTAS MEDIDAS PARA TODOS LOS ESCENARIOS:
        * 9 listas     -> Formando el alto del escenario.
        * 13 elementos -> Formando el ancho del escenario.

    IMPORTANTE: 
        * Para crear:
	        - Las puertas Norte, Sur, Este, Oeste (con ubicaciones),
            - Las puertas cerradas Norte, Sur, Este, Oeste (con mensajes),
            - Las puertas genéricas.
        
	      No es necesario crear objetos de tipo Elemento (véase escenarioManager.wlk) para dibujarlas,
          solo se agregaran como visuales en los objetos "escenario" con el método agregarVisualesEscena().

          Luego de dibujar el escenario reemplazar la N con _ si dibujamos todas las puertas. Si por ejemplo un 
          escenario tiene solo puertas Oeste y Este, se puede dibujar algo en las N que simbolizan Norte y Sur.
          Es importante sobreescribir el método configurarPuertas() con los requerimientos del escenario actual.

    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]
    ].reverse() 
    
    nombres de variables recomendados = mapa_nombreEscenario
*/

// ################################################################################################################# \\

// Referencias a los distintos visuales para setter sus posiciones a la matriz o instanciarlos.
class Elemento{ 
    const visual = null

    method construir(position){
        visual.position(position)
    }
}

// ################################################################################################################# \\

class ElementoLobo{
    method construir(posicion){
        const loboTemp = new Lobo(position = posicion);
        game.addVisual(loboTemp)
        gestorDeLobos.agregarLobos(loboTemp)
    }
}

// ################################################################################################################# \\

object _ inherits Elemento{
    override method construir(position){} // Por las dudas.
}

// ################################################################################################################# \\

object z inherits Elemento(visual = protagonista){} 

// ################################################################################################################# \\

object f inherits Elemento(visual = fogataOBJ){}

// ################################################################################################################# \\

object v inherits Elemento(visual = carpa){}

// ################################################################################################################# \\

object a inherits Elemento(visual = amiga){}

object n inherits Elemento(visual = nota){}
// ################################################################################################################# \\

object o{
    method construir(posicion){
        const temp = new Obstaculo(position = posicion);
        game.addVisual(temp);
        gestorDeObstaculos.agregar(temp)
    }
}

object p{
    method construir(posicion){
        const temp = new ParedInvisible(position = posicion);
        game.addVisual(temp);
        gestorDeObstaculos.agregar(temp)
    }
}

object x inherits Elemento(visual = cabañaOBJ){}
object c inherits Elemento(visual = cuevaOBJ){}
object q inherits Elemento(visual = graneroOBJ){}

// #####################################################################
 //                    ENEMIGOS
// #####################################################################

object l inherits ElementoLobo{} //agresivo

object t inherits ElementoLobo{} // pasivo

object j inherits Elemento(visual = loboEspecial){ // lobo especial del granero, al matarlo me spawnea la salida
    override method construir(posicion){
        super(posicion)
        puertaGranero.irHacia(entradaGranero)
       // game.addVisual(loboTemp)
        gestorDeLobos.agregarLobos(loboEspecial)
    }
}
   
// #####################################################################

object g inherits Elemento(visual = guardabosques){ // Guardabosques -> No implementado, no usar.
    
}

object u inherits Elemento(visual = leña){}

object h inherits Elemento(visual = hacha){}

object tr inherits Elemento(visual = tridente){}

object m inherits Elemento(visual = manopla){}

object s inherits Elemento(visual = auto){}

// ################################################################################################################# \\

object po inherits Elemento(visual = puertaOeste){}

object pn inherits Elemento(visual = puertaNorte){}

object pe inherits Elemento(visual = puertaEste){}

object ps inherits Elemento(visual = puertaSur){}

object pg inherits Elemento(visual = puertaEntradaCabaña){}

object pc inherits Elemento(visual = puertaEntradaCueva){}

object pq inherits Elemento(visual = puertaGranero){}

// ################################################################################################################# \\

const mapa_comun =
    [
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()

// ################################################################################################################# \\

const mapa_escenarioInicial_v1 = 
    [
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,a,z,_,f,v,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
     ].reverse()

// ################################################################################################################# \\

const mapa_escenarioBifurcacion_v1 =
    [
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,o,o,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,o,o,_,_,_,_,_],
        [_,_,_,_,_,_,_,o,_,_,_,_,_],
        [_,_,o,o,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,z,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()

const mapa_escenarioBifurcacion_v2 =     

    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , o , o , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , o , o , _ , _ , _ , _ , _ ],
        [ _ , _ ,_ , _ , _ , _ , _ , o , _ , _ , _ , z , _ ],
        [ _ , _ , o , o , _ , l , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , l , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , l , _ , l , _ , _ , _ , _ , _ ]

    ].reverse() 

const mapa_escenarioBifurcacion_v3 =

    [
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,o,o,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,o,o,_,_,_,_,_],
        [z,_,_,_,_,_,_,o,_,_,_,_,_],
        [_,_,o,o,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()

const mapa_escenarioBifurcacion_v4 = 
 [
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,o,o,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,o,o,_,_,_,_,_],
        [_,_,_,_,_,_,_,o,_,_,_,_,_],
        [_,_,o,o,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,z,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()
const mapa_escenarioBifurcacion_v5 =    
 [
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,l,_,_,_,_,_],
        [_,_,_,o,o,_,_,_,_,_,_,_,_],
        [_,_,l,_,_,_,o,o,_,_,_,_,_],
        [_,_,_,_,_,_,_,o,_,_,_,_,z],
        [_,_,o,o,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,l,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()

const mapa_escenarioBifurcacion_v6 =
 [
        [_,_,_,_,_,_,pn,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,o,o,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,o,o,_,_,_,_,_],
        [z,_,_,_,_,_,_,o,_,_,_,_,_],
        [_,_,o,o,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()

// ################################################################################################################# \\
//ENTRADA DE CABAÑA

const mapa_entradaCabaña_v1 = 
    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ ,z  , _ , _ , _ , x ,pg , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]

    ].reverse() 

const mapa_entradaCabaña_v2 = 
    [
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [po , _ , _ , _ , _ , z , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]

    ].reverse()     

const mapa_EntradaCabaña_v3 = 
[
    
        [ _ , _ , _ , _ , g , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ ,_  , _ , _ , z ,x ,_, _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]

    ].reverse() 
const mapa_EntradaCabaña_v4 =   
[
    
        [ _ , _ , _ , _ , _ , _ , z , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , x , pg, _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ],
        [ _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ]

    ].reverse() 

// CABAÑA MAPAS 
const mapa_cabañaInicial_v1 = 
   [
        [_,p,_,_,_,_,_,_,_,_,_,_,_],
        [_,p,_,_,_,_,_,_,_,_,_,_,_],
        [_,p,p,p,p,p,p,p,p,p,p,p,_],
        [_,p,p,u,_,_,p,p,_,p,_,p,_],
        [_,p,p,p,p,_,_,_,_,_,p,_,_],
        [_,p,pg,z,_,_,_,_,g,_,p,_,_],
        [_,p,p,p,_,_,_,_,_,_,p,_,_],
        [_,p,p,p,p,p,p,p,p,p,p,_,_],
        [_,p,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()   
const mapa_cabañaInicial_v2 = 
   [
        [_,p,_,_,_,_,_,_,_,_,_,_,_],
        [_,p,_,_,_,_,_,_,_,_,_,_,_],
        [_,p,p,p,p,p,p,p,p,p,p,p,_],
        [_,p,p,u,_,_,p,p,_,p,_,p,_],
        [_,p,p,p,p,_,_,_,_,l,p,_,_],
        [_,p,pg,z,_,_,_,n,_,l,p,_,_],
        [_,p,p,p,_,_,_,_,_,_,p,_,_],
        [_,p,p,p,p,p,p,p,p,p,p,_,_],
        [_,p,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()   
  
//************************************
const mapa_entradaCueva_v1 =
    [
        [p,p,p,p,p,p,_,_,_,_,_,_,_],
        [p,p,p,p,p,p,_,_,_,_,_,_,_],
        [_,c,_,_,pc,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,z,_],
        [_,l,_,_,_,_,_,l,_,_,_,_,_],
        [_,_,l,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()

const mapa_entradaCueva_v2 = 
    [
        [p,p,p,p,p,p,_,_,_,_,_,_,_],
        [p,p,p,p,p,p,_,_,_,_,_,_,_],
        [_,c,_,_,_,z,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()
const mapa_entradaCueva_v3 =
   [
        [p,p,p,p,p,p,_,_,_,_,_,_,_],
        [p,p,p,p,p,p,_,_,_,_,_,_,_],
        [_,c,_,_,pc,_,l,_,_,_,_,_,_],
        [_,_,_,_,_,l,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,z,_],
        [_,_,_,_,_,_,_,l,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()   

//#### ESCENARIOS CUEVAS (LABERINTO,SON 4)########

const mapa_cueva_v1 =
   [
        [_,_,_,_,_,_,pc,_,_,_,_,_,_],
        [o,o,o,_,o,_,o,o,o,o,_,o,_],
        [_,l,_,_,o,_,_,_,l,_,_,_,_],
        [_,o,o,_,o,_,o,o,_,o,_,o,_],
        [_,o,_,_,_,_,_,o,_,_,_,o,l],
        [_,o,_,o,o,o,_,o,o,o,_,o,_],
        [_,_,_,_,_,_,l,_,_,_,_,o,_],
        [o,_,o,o,_,o,o,o,o,o,o,o,_],
        [_,_,_,_,_,_,z,_,_,_,_,_,_]     ].reverse()

const mapa_cueva_v2 =
    [
 [_,o,_,_,_,o,_,_,_,_,_,o,_],
 [_,o,l,o,_,o,_,o,o,o,_,o,_],
 [_,_,_,o,_,_,_,_,_,l,_,_,_],
 [o,o,_,o,o,_,o,o,_,o,o,o,_],
 [_,_,_,_,_,_,_,o,_,_,_,o,pc],
 [_,o,o,o,o,l,_,o,o,o,_,o,_],
 [_,_,_,_,o,_,_,_,_,o,_,o,_],
 [o,o,o,_,o,o,o,o,_,o,_,o,_],
 [_,z,_,_,_,_,_,_,_,o,_,_,_]
].reverse() 

    

const mapa_cueva_v3 =
    [
 [z,_,_,o,_,_,_,_,_,o,_,_,_],
 [o,o,_,o,o,o,o,_,o,o,_,o,_],
 [_,_,_,_,_,_,o,_,_,_,_,o,_],
 [o,o,_,o,o,_,o,l,o,o,_,o,_],
 [_,_,_,_,_,_,o,_,_,_,_,o,_],
 [_,o,_,o,o,o,o,_,o,o,_,o,_],
 [l,_,_,_,_,o,_,_,_,_,_,o,_],
 [o,o,_,_,o,o,o,_,o,o,o,o,_],
 [_,_,_,_,_,l,_,_,_,o,pc,_,_]
].reverse()   

    

const mapa_cueva_v4 =
    [
        [_,_,_,_,_,_,_,_,_,_,o,z,_],
        [_,o,o,o,o,_,o,_,o,o,o,_,_],
        [_,_,l,_,o,_,o,_,_,_,_,_,_],
        [o,o,_,_,o,_,o,_,o,_,o,o,_],
        [_,_,_,o,_,_,_,l,o,_,_,o,_],
        [_,o,o,o,_,o,o,o,o,_,o,o,o],
        [_,_,_,l,_,_,_,_,_,_,o,l,_],
        [_,_,_,o,o,o,o,o,o,_,o,o,_],
        [_,_,_,_,_,_,pc,o,_,_,_,_,_]
    ].reverse()  
   

const mapa_cueva_v5 =
     [
        [_,_,_,_,_,_,_,_,_,_,o,z,_],
        [_,o,o,o,o,_,o,_,o,o,o,_,_],
        [_,_,l,_,o,_,o,_,_,_,_,_,_],
        [o,o,_,_,o,_,o,_,o,_,o,o,_],
        [pc,_,_,o,_,_,_,l,o,_,_,o,_],
        [_,o,o,o,_,o,o,o,o,_,o,o,o],
        [_,_,_,l,_,_,_,_,_,_,o,l,_],
        [_,_,_,o,o,o,o,o,o,_,o,o,_],
        [_,_,_,_,_,_,_,o,_,_,_,_,_]
    ].reverse()  



// GRANERO

const mapa_entradaGranero_v1 = 
[
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,q,_,pq,_,_,_,_,_,_],
        [_,_,_,_,g,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,z,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()

const mapa_entradaGranero_v2 =    
[
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,q,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,z,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse() 

const mapa_peleaGranero = 
[
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,tr,_,_,m,_,_,h,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,l,_,l,_,j,_,_,_,l,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,z,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,pq,p,_,_,_,_,_,_]
     
    ].reverse()


//FINAL
const mapa_FinalJuego =
[
        [o,o,o,o,o,o,o,o,o,o,o,o,o],
        [o,l,_,_,_,_,_,_,_,_,_,_,o],
        [o,_,l,_,_,_,_,_,_,_,_,_,o],
        [o,_,_,_,_,_,_,_,_,_,_,_,o],
        [o,_,_,_,g,_,_,_,_,_,z,_,pc],
        [o,_,_,_,_,_,_,_,_,_,_,_,o],
        [o,_,l,_,_,_,_,_,_,_,_,_,o],
        [o,l,_,_,_,_,_,_,_,_,_,_,o],
        [o,o,o,o,o,o,o,o,o,o,o,o,o]
     
    ].reverse()



const mapa_estacionamiento_v1 = 

[
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,s,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,z,_,_,_,_,_,_]
     
    ].reverse()







const mapa_escenarioTest =
    [
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,c,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,j,_],
        [_,h,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,l,_,_,_,l,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,z,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_]
     
    ].reverse()


// ################################################################################################################# \\
// EXCLUSIVO PARA REALIZAR LOS TEST, NO TOCAR O AVISAR SI SE MODIFICA

    const mapa_TEST =
    [
        [_,_,_,_,_,_,pn,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [po,_,_,_,_,_,_,_,_,_,_,_,_],       
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [_,_,_,_,_,_,_,_,_,_,_,_,_],
        [z,_,_,_,_,h,_,_,_,_,_,_,_]
     
    ].reverse()