import protagonista.*
import visualesExtra.*
import direccion.*
import gestores.*
import escenariosManager.*
import videojuego.*
import npcEstados.*
import escenariosMapas.*
import puertas.*
import enemigos.*

describe "Movimiento del personaje"{
    
    method initialize(){
        game.width(7)
        game.height(7)
        game.cellSize(100)

        protagonista.position(game.at(0,0))
        game.addVisual(protagonista)
    }   

    test "El personaje parte de la posicion (0,0) hacia la posicion (2,0) sin problemas."{
        protagonista.mover(derecha,2)
        assert.equals(game.at(2,0),protagonista.position())
    }

    test "El personaje se mueve 2 celdas arriba, 2 celdas a la derecha y la posicion coincide."{
        protagonista.mover(arriba,2)
        protagonista.mover(derecha,2)

        assert.equals(game.at(2,2),protagonista.position())
    }

    test "El personaje se mueve 2 celdas a la derecha,3 arriba y 4 a la izquierda, pero no sale del tablero."{
        protagonista.mover(derecha,2)
        protagonista.mover(arriba,3)
        assert.throwsException({protagonista.mover(izquierda,4)})
    }

    test"El personaje no puede salir  del tablero por el Oeste."{
         protagonista.mover(izquierda, 10)
        assert.that(gestorDeCeldasTablero.estaDentroDelTablero(protagonista.position()))
    }

    test"El personaje no sale del tablero por el Norte."{
        protagonista.mover(arriba, 20)
        assert.that(gestorDeCeldasTablero.estaDentroDelTablero(protagonista.position()))
    }

    test"El personaje no sale del tablero por el Este."{
        protagonista.mover(derecha,20)
        assert.that(gestorDeCeldasTablero.estaDentroDelTablero(protagonista.position()))
    }

    test"El personaje no sale del tablero por el Sur."{
        protagonista.mover(abajo,20)
        assert.that(gestorDeCeldasTablero.estaDentroDelTablero(protagonista.position()))
    }

    test "El personaje se mueve 3 a la derecha, 3 a la izquierda y queda en el mismo lugar."{
        protagonista.mover(derecha,3)
        protagonista.mover(izquierda,3)

        assert.equals(game.at(0,0),protagonista.position())
    }
}

describe "Movimiento del personaje con colisiones:"{

    method initialize(){
        game.width(20)
        game.height(20)
        game.cellSize(100)

        amiga.position(game.at(5,0))
        fogata.position(game.at(2,2))
        carpa.position(game.at(5,5))
        protagonista.position(game.at(0,0))

        game.addVisual(amiga)
        game.addVisual(fogataOBJ)
        game.addVisual(carpa)
        game.addVisual(protagonista)
    }
    
    test "El personaje se mueve 7 pasos hacia la derecha pero no puede atravesar a la amiga y queda a la izquierda de su amiga."{
        assert.equals(game.at(5,0),amiga.position())

        protagonista.mover(derecha,7)
        assert.equals(game.at(4,0),protagonista.position())
    }

    test "El personaje se mueve a la posicion (7,0) realizando un rodeo a la amiga en la posicion (5,0)."{
        protagonista.mover(derecha, 7)
        assert.equals(game.at(4,0), protagonista.position())

        protagonista.mover(arriba)
        protagonista.mover(derecha,2)
        protagonista.mover(abajo)

        assert.equals(game.at(6,0), protagonista.position())

        protagonista.mover(derecha)
        assert.equals(game.at(7,0), protagonista.position())
    }

    test "El personaje (0,0) se posiciona a la izquierda de la carpa (5,5) pero antes esquiva la fogata (2,2)."{
        assert.equals(game.at(0,0),protagonista.position()) 
        assert.equals(game.at(5,5),carpa.position())
        assert.equals(game.at(2,2),fogata.position())
        
        protagonista.mover(arriba,2)
        protagonista.mover(derecha,4) // Solo da 2 pasos, no atraviesa la fogata.

        assert.equals(game.at(1,2),protagonista.position()) // Estoy a la izquierda de la fogata.

        // Doy rodeo a la fogata. 
        protagonista.mover(arriba,3)
        protagonista.mover(derecha,10) // Solo da 4 pasos, no atraviesa carpa.

        assert.equals(game.at(4,5),protagonista.position()) // Estoy a la izquierda de la carpa.
    }

    test "El personaje (0,0) va hasta la izquierda de la carpa, luego va hasta la derecha de la fogata (2,2) y vuelve a su posicion inicial."{
        assert.equals(game.at(0,0), protagonista.position()) 
        assert.equals(game.at(5,5), carpa.position())
        assert.equals(game.at(2,2), fogata.position())

        protagonista.mover(derecha,4)
        protagonista.mover(arriba,5)
        protagonista.mover(derecha) // No atravieso la carpa.

        assert.equals(game.at(4,5), protagonista.position()) // Estoy a la izquierda de carpa.
        
        protagonista.mover(abajo,3)
        protagonista.mover(izquierda,4) // No atravieso la fogata.

        assert.equals(game.at(3,2), protagonista.position()) // Estoy a la derecha de fogata.
        
        protagonista.mover(abajo,2)
        protagonista.mover(izquierda,3)

        assert.equals(game.at(0,0), protagonista.position())
    }
}

describe "Funcionamiento de puertas"{
    const confg_test = {e=> e.mapa(mapa_TEST);e.visualesEnEscena([puertaNorte, puertaOeste])}
    const confg_escsig = {puertaNorte.irHacia(bifurcacion); puertaOeste.irHacia(fogata)}
    const escenarioParaTestear = esc.construir(confg_test, confg_escsig, "")

    method initialize(){
        game.width(7)
        game.height(7)
        game.cellSize(100)
        videojuego.escenario(escenarioParaTestear)
        escenarioParaTestear.puestaEnEscena()    
    }
   
    test "La puerta norte cambia de escenarioTEST al escenarioBifurcacion"{
        puertaNorte.interaccion()
        assert.equals(bifurcacion,videojuego.escenario())
    }
    
    test  "La puerta norte cambia de escenarioTEST al escenarioInicial"{
        puertaOeste.interaccion()
        assert.equals(fogataOBJ,videojuego.escenario())
    }
}

describe "Ataque sobre lobo" {
    const lobo = new Lobo()

    method initialize() {
        game.width(7)
        game.height(7)
        game.cellSize(100)

        protagonista.position(game.at(1,1))
        lobo.position(game.at(2,1))
        protagonista.estadoCombate(agresivoProtagonistaH)

        game.addVisual(protagonista)
        game.addVisual(lobo)
    }

    test "El protagonista armado derrota al lobo" {
        assert.equals(10, lobo.vida()) // Vida del lobo antes de ataque
        assert.equals(agresivoProtagonistaH, protagonista.estadoCombate())
        protagonista.atacar()
        lobo.atacarEnemigo()          
        assert.equals(9, lobo.vida()) // Vida del lobo despues de ataque
        assert.equals(10, protagonista.vida())
    }

    test "El protagonista desarmado no puede eliminar al lobo" {
        protagonista.estadoCombate(pasivoProtagonista)
        protagonista.atacar()
        assert.equals(10, lobo.vida()) // Lobo sigue con la vida en 10
    }
}

describe "Ataque sobre guardabosques" {

    method initialize() {
        game.width(7)
        game.height(7)
        game.cellSize(100)

        protagonista.position(game.at(3,3))
        guardabosques.position(game.at(4,3))
        protagonista.estadoCombate(agresivoProtagonistaH)
        guardabosques.estadoCombate(agresivoGuardabosques)
        game.addVisual(protagonista)
        game.addVisual(guardabosques)
    }

    test "El protagonista armado le baja la vida al guardabosques al atacarlo" {
        assert.equals(40, guardabosques.vida())
        protagonista.atacar()
        assert.equals(39, guardabosques.vida())
        assert.equals(10, protagonista.vida()) // Suponiendo que el guardabosques no ataca autom치ticamente
    }

    test "El protagonista desarmado no afecta al guardabosques" {
        protagonista.estadoCombate(pasivoProtagonista)
        protagonista.atacar()
        assert.equals(40, guardabosques.vida()) // No se reduce la vida
    }

    test "Si el guardabosques ataca, el protagonista pierde vida"{
        guardabosques.atacarEnemigo()
        assert.equals(8, protagonista.vida()) // Supongamos que hace 1 de da침o
    }

    test "El guardabosques desarmado no puede atacar" {
        guardabosques.estadoCombate(pasivoProtagonista)
        guardabosques.atacarEnemigo()
        assert.equals(10, protagonista.vida()) // No recibi칩 da침o
    }
}

describe "Cambio de estado desarmado a armado"{ 
    const confg_test   = {e=> e.mapa(mapa_TEST); e.visualesEnEscena([protagonista, hacha])}
    const confg_escsig = {puertaNorte.irHacia(bifurcacion); puertaOeste.irHacia(fogata)}
    const escenarioParaTestear = esc.construir(confg_test, confg_escsig, "")

    method initialize(){
        game.width(7)
        game.height(7)
        game.cellSize(100)
        videojuego.escenario(escenarioParaTestear)
        escenarioParaTestear.puestaEnEscena()  
    }

    test"Al interactuar con el hacha el protagonista cambia de estado desarmado a armado"{
        assert.equals(pasivoProtagonista, protagonista.estadoCombate())
        hacha.interaccion()
        assert.equals(agresivoProtagonistaH, protagonista.estadoCombate())
    }
}

describe "Comportamiento del lobo" {
    const lobo = new Lobo()
    const obstaculo = new Obstaculo(position = game.at(4, 3))

    method initialize() {
        game.width(7)
        game.height(7)
        game.cellSize(100)

        protagonista.position(game.at(3, 3))
        protagonista.estadoCombate(agresivoProtagonistaH)

        lobo.position(game.at(5, 3))
        game.addVisual(protagonista)
        game.addVisual(lobo)
        game.addVisual(obstaculo)
    }

    test "El lobo no se mueve si ya esta sobre el protagonista" {
        lobo.position(protagonista.position())
        const posInicial = lobo.position()

        lobo.perseguirEnemigo()

        assert.equals(posInicial, lobo.position()) // No se mueve
    }

    test "El lobo no se mueve si esta muerto" {
        lobo.actualizarAMuerto()
        const posInicial = lobo.position()
        lobo.perseguirEnemigo()
        assert.equals(posInicial, lobo.position())
    }

    test "El lobo ataca al protagonista si esta sobre el" {
        protagonista.vida(3)
        lobo.position(protagonista.position())

        // NOTA: atacarEnemigo usa game.schedule. Para simular, usamos atacadoPor directamente
        protagonista.atacadoPor(lobo)

        assert.equals(2, protagonista.vida())
    }

    test "El lobo se mueve hacia el protagonista si no esta sobre el" {
        // Movimiento simple en l칤nea recta horizontal
        protagonista.position(game.at(2, 2))
        lobo.position(game.at(4, 2))

        const posInicial = lobo.position()
        lobo.perseguirEnemigo()
        const nuevaPos = lobo.position()

        assert.equals(game.at(3,2), nuevaPos) // Se mueve a (3,2), una celda hacia la izquierda    
    }

    test "El lobo esquiva obstaculo al perseguir al protagonista" {
        lobo.perseguirEnemigo()
    
        assert.equals(game.at(4,2), lobo.position()) // Se dirige hacia la celda en diagonal al noreste 
    }
}
