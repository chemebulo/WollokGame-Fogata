import protagonista.*
import visualesExtra.*
import direccion.*
import gestores.*
import escenariosManager.*
import videojuego.*
import npcEstados.*
import puertas.*
import enemigos.*
import npcAtaques.*
import dialogosManager.*
import eventos.*

// ############################################################################################################################ \\

// VARIABLES PARA TESTEO DE CONFIGURADORES DE ESCENARIOS:
	const escenarioX = constructorEscenario.construir({}, {}, "")
	const eventoX    = new EventoLoopIndividual( sujetoUnico = protagonista, comportamiento = {})
	const configuradorTEST    = {e => e.actualizarVisuales([protagonista, puertaNorte]); e.actualizarEventos([eventoX])} // Mapa test.
	const configuradorSigTEST = {puertaNorte.irHacia(granero)}

//VARIABLES PARA TESTEO DE FUNCIONAMIENTO DE PUERTAS:
	const configuracionActualTEST    = {e => e.actualizarVisuales([puertaNorte, puertaOeste])}
	const configuracionSiguienteTEST = {puertaNorte.irHacia(bifurcacion); puertaOeste.irHacia(fogata)}
	const escenarioParaTestear = constructorEscenario.construir(configuracionActualTEST, configuracionSiguienteTEST, "")          

// ############################################################################################################################ \\

describe "Movimiento del personaje:"{
    
    method initialize(){
        game.width(7)
        game.height(7)
        game.cellSize(100)
        protagonista.position(game.at(0,0))
        game.addVisual(protagonista)
    }   

    test "El personaje parte de la posicion (0,0) hacia la posicion (2,0) sin problemas."{
        protagonista.mover(derecha,2)
        assert.equals(game.at(2,0), protagonista.position())
    }

    test "El personaje se mueve 2 celdas arriba, 2 celdas a la derecha y la posicion coincide."{
        protagonista.mover(arriba,2)
        protagonista.mover(derecha,2)
        assert.equals(game.at(2,2), protagonista.position())
    }

    test "El personaje se mueve 2 celdas a la derecha,3 arriba y 4 a la izquierda, pero no sale del tablero."{
        protagonista.mover(derecha,2)
        protagonista.mover(arriba,3)
        assert.throwsException({protagonista.mover(izquierda,4)})
    }

    test "El personaje no puede salir del tablero por el Oeste."{
        assert.throwsException({protagonista.mover(izquierda, 10)})
        assert.that(gestorDeCeldasTablero.estaDentroDelTablero(protagonista.position()))
    }

    test "El personaje no sale del tablero por el Norte."{
		assert.throwsException({protagonista.mover(arriba, 20)})
		assert.that(gestorDeCeldasTablero.estaDentroDelTablero(protagonista.position()))
    }

    test "El personaje no sale del tablero por el Este."{
		assert.throwsException({protagonista.mover(derecha, 20)})         
		assert.that(gestorDeCeldasTablero.estaDentroDelTablero(protagonista.position()))
    }

    test "El personaje no sale del tablero por el Sur."{
		assert.throwsException({protagonista.mover(abajo, 20)})
        assert.that(gestorDeCeldasTablero.estaDentroDelTablero(protagonista.position()))
    }

    test "El personaje se mueve 3 a la derecha, 3 a la izquierda y queda en el mismo lugar."{
        protagonista.mover(derecha,3)
        protagonista.mover(izquierda,3)
        assert.equals(game.at(0,0), protagonista.position())
    }
}

// ############################################################################################################################ \\

describe "Movimiento del personaje con colisiones:"{

    method initialize(){
        game.width(20)
        game.height(20)
        game.cellSize(100)

        amiga.position(game.at(5,0))
        fogataOBJ.position(game.at(2,2))
        carpa.position(game.at(5,5))
        protagonista.position(game.at(0,0))

        game.addVisual(amiga)
        game.addVisual(fogataOBJ)
        game.addVisual(carpa)
        game.addVisual(protagonista)
    }
    
    test "El personaje se mueve 7 pasos hacia la derecha pero no puede atravesar a la amiga y queda a su izquierda."{
        assert.equals(game.at(5,0),amiga.position())
        protagonista.mover(derecha,4)
        assert.equals(game.at(4,0), protagonista.position())

        assert.throwsException({protagonista.mover(derecha)}) // El personaje intenta moverse, pero no puede atravesar a la amiga.
        assert.equals(game.at(4,0), protagonista.position())
    }

    test "El personaje no puede atravesar obstaculos."{
        const obs = new Obstaculo()
        obs.position(game.at(0,3))
        game.addVisual(obs)
        protagonista.mover(arriba,2)
        assert.equals(game.at(0,2), protagonista.position())
        assert.equals(game.at(0,3), obs.position())
        assert.throwsException({protagonista.mover(arriba)})
    }
}

// ############################################################################################################################ \\

describe "Funcionamiento de puertas:"{
   
    method initialize(){
        game.width(7)
        game.height(7)
        game.cellSize(100)
        videojuego.escenario(escenarioParaTestear)
        escenarioParaTestear.puestaEnEscena()    
    }
   
    test "La puerta norte cambia de escenarioTEST al escenarioBifurcacion."{
        puertaNorte.interaccion()
        assert.equals(bifurcacion, videojuego.escenario())
    }
    
    test  "La puerta norte cambia de escenarioTEST al escenarioInicial."{
        puertaOeste.interaccion()
        assert.equals(fogata, videojuego.escenario())
    }
}

// ############################################################################################################################ \\

describe "Funcionamiento de dialogo inicial:" {
    method initialize() {
        game.width(5)
        game.height(5)
        game.cellSize(100)

        protagonista.position(game.at(2, 2))
        amiga.position(game.at(2, 1))

        game.addVisual(protagonista)
        game.addVisual(amiga)

        gestorDeDialogo.dialogo(dialogoEscenarioInicial)
        gestorDeDialogo.esMomentoDeDialogar(true)
    }

    test "No se interactua si NO es tiempo de diálogo." {
        gestorDeDialogo.esMomentoDeDialogar(false)
        const initialSize = gestorDeDialogo.dialogo().dialogoEscenario().size()

        gestorDeDialogo.interactuarConNPC()
        assert.equals(initialSize, gestorDeDialogo.dialogo().dialogoEscenario().size()) // El tamaño del dialogo no debería cambiar.
    }

    test "No se interactua si el protagonista está lejos." {
        protagonista.position(game.at(4, 4))
        const initialSize = gestorDeDialogo.dialogo().dialogoEscenario().size()

        gestorDeDialogo.interactuarConNPC()
        assert.equals(initialSize, gestorDeDialogo.dialogo().dialogoEscenario().size()) // El tamaño del diálogo no debería cambiar.
    }
}

// ############################################################################################################################ \\

describe "Ataque sobre lobo:" {
    const lobo = new Lobo()

    method initialize() {
        game.width(7)
        game.height(7)
        game.cellSize(100)

        protagonista.position(game.at(1,1))
        lobo.position(game.at(2,1))
        protagonista.estadoCombate(agresivoProtagonistaH)

        game.addVisual(protagonista)
        game.addVisual(lobo)
    }

    test "El protagonista armado derrota al lobo." {
        assert.equals(20, lobo.vida()) // Vida del lobo antes de ataque.
        assert.equals(agresivoProtagonistaH, protagonista.estadoCombate())
        protagonista.atacar()
        lobo.atacarEnemigo()          
        assert.equals(17, lobo.vida()) // Vida del lobo despues de ataque.
        assert.equals(100, protagonista.vida())
    }

    test "El protagonista desarmado no puede eliminar al lobo." {
        protagonista.estadoCombate(pasivoProtagonista)
        protagonista.atacar()
        assert.equals(20, lobo.vida()) // Lobo sigue con la vida en 10.
    }
}

// ############################################################################################################################ \\

describe "Ataque sobre guardabosques:" {
    method initialize() {
        game.width(7)
        game.height(7)
        game.cellSize(100)

        protagonista.position(game.at(3,3))
        guardabosques.position(game.at(4,3))
        protagonista.estadoCombate(agresivoProtagonistaH)
        guardabosques.estadoCombate(agresivoGuardabosques)
        game.addVisual(protagonista)
        game.addVisual(guardabosques)
    }

    test "El protagonista armado le baja la vida al guardabosques al atacarlo." {
        assert.equals(50, guardabosques.vida())
        protagonista.atacar()
        assert.equals(47, guardabosques.vida())
        assert.equals(100, protagonista.vida()) // El guardabosques no ataca automaticamente.
    }

    test "El protagonista desarmado no afecta al guardabosques." {
        protagonista.estadoCombate(pasivoProtagonista)
        protagonista.atacar()
        assert.equals(50, guardabosques.vida()) // No se reduce la vida.
    }

    test "Si el guardabosques ataca, el protagonista pierde vida."{
        protagonista.atacadoPor(guardabosques) //NOTA: atacarEnemigo usa game.schedule. Para simular, usamos atacadoPor directamente.
        assert.equals(98, protagonista.vida())
    }

    test "El guardabosques desarmado no puede atacar." {
        guardabosques.estadoCombate(pasivoProtagonista)
        guardabosques.atacarEnemigo()
        assert.equals(100, protagonista.vida()) // No recibió  daño.
    }
}

// ############################################################################################################################ \\

describe "Cambio de estado desarmado a armado:"{ // Mapa test.
    const configuracionActualTEST    = {e => e.actualizarVisuales([protagonista, hacha])}
    const configuracionSiguienteTEST = {puertaNorte.irHacia(bifurcacion); puertaOeste.irHacia(fogata)}
    const escenarioParaTestear = constructorEscenario.construir(configuracionActualTEST, configuracionSiguienteTEST, "")

    method initialize(){
        game.width(7)
        game.height(7)
        game.cellSize(100)
        videojuego.escenario(escenarioParaTestear)
        escenarioParaTestear.puestaEnEscena()  
    }

    test"Al interactuar con el hacha el protagonista cambia de estado desarmado a armado."{
        assert.equals(pasivoProtagonista, protagonista.estadoCombate())
        hacha.interaccion()
        assert.equals(agresivoProtagonistaH, protagonista.estadoCombate())
    }
}

// ############################################################################################################################ \\

describe "Comportamiento del lobo:" {
    const lobo      = new Lobo()
    const obstaculo = new Obstaculo(position = game.at(4, 3))

    method initialize() {
        game.width(7)
        game.height(7)
        game.cellSize(100)

        protagonista.position(game.at(3, 3))
        protagonista.estadoCombate(agresivoProtagonistaH)

        lobo.position(game.at(5, 3))
        game.addVisual(protagonista)
        game.addVisual(lobo)
        game.addVisual(obstaculo)
    }

    test "El lobo no se mueve si ya esta sobre el protagonista." {
        lobo.position(protagonista.position())
        const posInicial = lobo.position()

        lobo.perseguirEnemigo()

        assert.equals(posInicial, lobo.position()) // No se mueve.
    }

    test "El lobo no se mueve si esta muerto." {
        lobo.actualizarAMuerto()
        const posInicial = lobo.position()
        lobo.perseguirEnemigo()
        assert.equals(posInicial, lobo.position())
    }

    test "El lobo ataca al protagonista si esta sobre el." {
        protagonista.vida(3)
        lobo.position(protagonista.position())

        protagonista.atacadoPor(lobo) // NOTA: Usamos atacadoPor(visual) directamente.

        assert.equals(1, protagonista.vida())
    }

    test "El lobo se mueve hacia el protagonista si no esta sobre el." {
        // Movimiento simple en línea recta horizontal.
        protagonista.position(game.at(2, 2))
        lobo.position(game.at(4, 2))

        const posInicial = lobo.position()
        lobo.perseguirEnemigo()
        const nuevaPos = lobo.position()

        assert.equals(game.at(3,2), nuevaPos) // Se mueve a (3,2), una celda hacia la izquierda.   
    }

    test "El lobo esquiva obstaculo al perseguir al protagonista." {
        lobo.perseguirEnemigo()
        assert.equals(game.at(4,2), lobo.position()) // Se dirige hacia la celda en diagonal al noreste.
    }
}

// ############################################################################################################################ \\

describe "Comportamiento del guardabosque:"{

	method initialize() {
        game.width(7)
        game.height(7)
        game.cellSize(100)

        protagonista.position(game.at(3,3))
        guardabosques.position(game.at(4,3))
        protagonista.estadoCombate(agresivoProtagonistaH)
        guardabosques.estadoCombate(agresivoGuardabosques)
        game.addVisual(protagonista)
        game.addVisual(guardabosques)
    }

    test"El guardabosque no se mueve si esta muerto."{
        const posInicial= guardabosques.position()
        guardabosques.actualizarAMuerto()
        guardabosques.perseguirEnemigo()
        assert.equals(posInicial, guardabosques.position())
    }

    test "El guardabosques dispara con la escopeta y daña al protagonista."{
        assert.equals(100, protagonista.vida())

        protagonista.atacadoPor(bala1) // Ejecutamos el daño de forma directa simulando el impacto.
        assert.equals(90, protagonista.vida())
    }

    test "La bala no daña al guardabosques." {
        bala1.position(guardabosques.position()) // Forzamos a la bala a estar sobre el guardabosques.
        game.addVisual(bala1)
        
        bala1.interaccion()
        assert.equals(50, guardabosques.vida())
    }

    test "La bala desaparece al salir del tablero." {
        protagonista.atacadoPor(bala1)

        game.removeVisual(bala1) // Simulamos que la bala fue eliminada del juego.
        assert.equals([], game.getObjectsIn(bala1.position()).filter({v => v == bala1}))
    }

    test "Varias balas dañan al protagonista acumulativamente." {
        protagonista.atacadoPor(bala1)
        assert.equals(90, protagonista.vida())

        protagonista.atacadoPor(bala2)
        assert.equals(80, protagonista.vida())
    }

    test "La bala daña al lobo si lo alcanza." {
        const lobo = new Lobo()
        lobo.vida(20)
        lobo.position(game.at(2,2))
        bala1.position(lobo.position())

        game.addVisual(lobo)
        game.addVisual(bala1)

        bala1.interaccion() // Simulamos que la bala impacta.
        assert.equals(10, lobo.vida()) // Recibe 10 de daño.
    }
}

// ############################################################################################################################ \\

describe "Fin del juego cuando muere el protagonista:" {

    method initialize() {
        game.width(7)
        game.height(7)
        game.cellSize(100)
    }

    test"El juego finaliza al morir el protagonista."{
        assert.equals(0,0)
    }
}

// ############################################################################################################################ \\
// TESTEO DE CONFIGURADOR DE ESCENARIOS 

describe "Funcionamiento de los configuradores de escenario:"{
    
    test "El configurador de escenarios modifica el estado del escenario."{
        assert.equals([],escenarioX.visualesEnEscena())
        assert.equals([],escenarioX.eventos())
        escenarioX.configuradorTotal(configuradorTEST, {})
        escenarioX.configurar()
        assert.equals([protagonista,puertaNorte], escenarioX.visualesEnEscena())
        assert.equals([eventoX], escenarioX.eventos())
    }

    test "El configurador de escenario Siguiente modifica las puertas."{
        puertaNorte.irHacia(fogata)
        assert.equals(fogata,puertaNorte.irHacia())
        escenarioX.configuradorTotal({}, configuradorSigTEST)
        escenarioX.configurarEscenarioSiguiente()
        puertaNorte.irHacia(granero)
    }

    test "El configurador de escenario siguiente modifica a otros escenarios."{
        const nuevoEscenario    = constructorEscenario.construir({}, {}, "")
        const nuevoConfigurador = {e => e.actualizarVisuales([protagonista]); e.actualizarEventos([eventoX])}
        const configuracionSiguienteX = {nuevoEscenario.configuradorTotal(nuevoConfigurador, {})}

        // Se le da al escenarioX un configurador para el escenario siguiente a este.
        escenarioX.configuradorTotal({}, configuracionSiguienteX)

        // El escenario "nuevoEscenario" comienza con visuales y eventos vacios.
        assert.equals([], nuevoEscenario.visualesEnEscena())
        assert.equals([], nuevoEscenario.eventos())

        // El escenarioX le modifica a nuevoEscenario sus configuradores.
        escenarioX.configurarEscenarioSiguiente() 

        // El nuevoEscenario se modifica a si mismo con los configuradores que le dio el escenarioX.
        nuevoEscenario.configurar()
		assert.equals([protagonista], nuevoEscenario.visualesEnEscena())
        assert.equals([eventoX], nuevoEscenario.eventos())
    }
}

// ############################################################################################################################ \\

// Testeo de gestores